@model Laboration1.ViewModels.ItemIndexViewModel

@{
	ViewData["Title"] = "Index";
}

<h1>Index</h1>

<p>
	<a asp-action="Create">Create New</a>
</p>

<form class="form-inline" method="get">
	<div class="form-group">
		<input type="text" name="query" class="form-control" id="search" placeholder="Search">
	</div>
	<button type="submit" class="ml-2 btn btn-primary mb-2">Search</button>
</form>

<h4>Page @Model.Page / @Math.Ceiling((double)Model.TotalItems / 5) </h4>

<table class="table">
	<thead>
		<tr>
			<th>
				Name
			</th>
			<th>
				Description
			</th>
			<th>
				Power source
			</th>
			<th>
				Category
			</th>
			<th>
				Thumbnail hash
			</th>
			<th></th>
		</tr>
	</thead>
	<tbody>
		@foreach (var item in Model.Items)
		{
			<tr>
				<td>
					@Html.DisplayFor(modelItem => item.name)
				</td>
				<td>
					@Html.DisplayFor(modelItem => item.Description)
				</td>
				<td>
					@Html.DisplayFor(modelItem => item.PowerSource.Name)
				</td>
				<td>
					@Html.DisplayFor(modelItem => item.Category.Name)
				</td>
				<td>
					@Html.DisplayFor(modelItem => item.ThumbnailHash)
				</td>
				<td>
					<a asp-action="Edit" asp-route-id="@item.ItemId">Edit</a> |
					<a asp-action="Details" asp-route-id="@item.ItemId">Details</a> |
					<a asp-action="Delete" asp-route-id="@item.ItemId">Delete</a>
				</td>
			</tr>
		}
	</tbody>
</table>

<button class="btn btn-primary" id="btn_previous_page" @(Model.Page <= 1 ? "disabled" : "")>Previous page</button>
<button class="btn btn-primary" id="btn_next_page" @(Model.Page >= Math.Ceiling((double)Model.TotalItems / 5) ? "disabled" : "")>Next page</button>

<script>
	window.addEventListener('load', function () {
		$(function () {
			$("#btn_next_page").on("click", function () {
				if (!$(this).prop("disabled")) {
					changePage(1);
				}
			});

			$("#btn_previous_page").on("click", function () {
				if (!$(this).prop("disabled")) {
					changePage(-1);
				}
			});
		});
	});

	function changePage(value) {
		let page = getUrlParameter("page");
		if (page == undefined) {
			page = 1;
		} else {
			page = Number(page);
		}
		setUrlParameter("page", page + value);
		window.location.reload();
	}

	function updateQueryString(key, value, url) {
		if (!url) url = window.location.href;
		var re = new RegExp("([?&])" + key + "=.*?(&|#|$)(.*)", "gi"), hash;
		if (re.test(url)) {
			if (typeof value !== 'undefined' && value !== null) {
				return url.replace(re, '$1' + key + "=" + value + '$2$3');
			} else {
				hash = url.split('#');
				url = hash[0].replace(re, '$1$3').replace(/(&|\?)$/, '');
				if (typeof hash[1] !== 'undefined' && hash[1] !== null)
					url += '#' + hash[1];
				return url;
			}
		} else {
			if (typeof value !== 'undefined' && value !== null) {
				var separator = url.indexOf('?') !== -1 ? '&' : '?';
				hash = url.split('#');
				url = hash[0] + separator + key + '=' + value;
				if (typeof hash[1] !== 'undefined' && hash[1] !== null)
					url += '#' + hash[1];
				return url;
			} else {
				return url;
			}
		}
	}

	function setUrlParameter(name, value) {
		window.history.replaceState({}, '', updateQueryString(name, value));
	}

	function deleteUrlParameter(name) {
		window.history.replaceState({}, '', updateQueryString(name));
	}

	function getUrlParameter(variable) {
		var query = window.location.search.substring(1);
		var vars = query.split("&");
		for (var i = 0; i < vars.length; i++) {
			var pair = vars[i].split("=");
			if (pair[0] == variable) {
				return pair[1];
			}
		}
		return undefined;
	}
</script>